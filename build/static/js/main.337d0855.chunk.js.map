{"version":3,"sources":["Components/connectWalletPage.js","constants/chains.js","ethereumFunctions.js","constants/coins.js","network.js","NavBar/MenuItems.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","maxWidth","margin","marginTop","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","buttonIcon","marginRight","footer","ConnectWalletPage","classes","className","Container","Paper","Typography","variant","color","Grid","container","direction","justifyContent","alignItems","href","networks","ChainId","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","DEVNET","AUTONITY","PARASTATE","GANCHE","routerAddress","Map","set","ROUTER","require","ERC20","FACTORY","PAIR","getNetwork","provider","a","network","chainId","getRouter","address","signer","Contract","abi","getWeth","getFactory","getAccount","window","ethereum","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","ethers","utils","formatEther","symbol","abbr","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","COINS","chains","MAINNET","name","createTheme","palette","primary","main","contrastText","secondary","Web3Provider","props","useState","isConnected","setConnected","Object","create","useRef","account","chainID","router","weth","backgroundListener","setupConnection","getSigner","includes","get","factory_address","createListener","setInterval","useEffect","current","clearInterval","listener","render","MenuItems","url","cName","NavBar","state","clicked","map","item","index","to","Component","minHeight","backgroundColor","COLORS","borderColor","borderWidth","borderStyle","container_input","marginLeft","container_blank","grid","height","fab","zIndex","input","typography","h5","inputBase","RemoveLiquidityField1","onClick","onChange","activeField","xs","Fab","size","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","styles","dialogContainer","titleSection","titleText","alignSelf","paddingLeft","paddingRight","coinList","overflowY","coinContainer","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","setAddress","setError","exit","Dialog","undefined","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","switchButton","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","data","isNaN","getAmountOut","toFixed","coinTimeout","setTimeout","clearTimeout","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","message","autoHideDuration","SwitchButton","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","Getliquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","background","values","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","NaN","quoteAddLiquidity","networksigner","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.337d0855.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 700,\r\n    margin: \"auto\",\r\n    marginTop: \"200px\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction ConnectWalletPage() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <div className=\"Title\">\r\n        <h1 className=\"navbar-logo\">\r\n          Alternative Uniswap Interface\r\n        </h1>\r\n      </div>\r\n\r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"common.white\"\r\n          >\r\n            Please connect an Ethereum wallet to your browser to use the\r\n            application\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConnectWalletPage;\r\n","export const networks = [3,4,5,42,123, 1337, 444800, 444900]\r\n\r\nexport const ChainId = {\r\n  // MAINNET: 1,\r\n  ROPSTEN: 3,\r\n  RINKEBY: 4,\r\n  GÃ–RLI: 5,\r\n  KOVAN: 42,\r\n  DEVNET: 444800,\r\n  AUTONITY: 444900,\r\n  PARASTATE: 123,\r\n  GANCHE: 1337\r\n};\r\n\r\nexport const routerAddress = new Map();\r\n// routerAddress.set(ChainId.MAINNET, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.ROPSTEN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.RINKEBY, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.GÃ–RLI, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.KOVAN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\r\nrouterAddress.set(ChainId.DEVNET, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\r\nrouterAddress.set(ChainId.AUTONITY, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\r\nrouterAddress.set(ChainId.PARASTATE, \"0x07a1905D44feeA439ceFAabd11a63bEf684abE11\");\r\nrouterAddress.set(ChainId.GANCHE, \"0x0F44AC51198D8F99847db6C431448dBC673428f1\");\r\n\r\n","import { Contract, ethers } from \"ethers\";\r\nimport * as chains from \"./constants/chains\";\r\n\r\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\r\nconst ERC20 = require(\"./build/ERC20.json\");\r\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\r\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\r\n\r\nexport function getProvider() {\r\n  return new ethers.providers.Web3Provider(window.ethereum);\r\n}\r\n\r\nexport function getSigner(provider) {\r\n  return provider.getSigner();\r\n}\r\n\r\nexport async function getNetwork(provider) {\r\n  const network = await provider.getNetwork();\r\n  return network.chainId;\r\n}\r\n\r\nexport function getRouter(address, signer) {\r\n  return new Contract(address, ROUTER.abi, signer);\r\n}\r\n\r\nexport async function checkNetwork(provider) {\r\n  const chainId = getNetwork(provider);\r\n  if (chains.networks.includes(chainId)){\r\n    return true\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getWeth(address, signer) {\r\n  return new Contract(address, ERC20.abi, signer);\r\n}\r\n\r\nexport function getFactory(address, signer) {\r\n  return new Contract(address, FACTORY.abi, signer);\r\n}\r\n\r\nexport async function getAccount() {\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n\r\n  return accounts[0];\r\n}\r\n\r\n//This function checks if a ERC20 token exists for a given address\r\n//    `address` - The Ethereum address to be checked\r\n//    `signer` - The current signer\r\nexport function doesTokenExist(address, signer) {\r\n  try {\r\n    return new Contract(address, ERC20.abi, signer);\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getDecimals(token) {\r\n  const decimals = await token.decimals().then((result) => {\r\n      return result;\r\n    }).catch((error) => {\r\n      console.log('No tokenDecimals function for this token, set to 0');\r\n      return 0;\r\n    });\r\n    return decimals;\r\n}\r\n\r\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\r\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function getBalanceAndSymbol(\r\n  accountAddress,\r\n  address,\r\n  provider,\r\n  signer,\r\n  weth_address,\r\n  coins\r\n) {\r\n  try {\r\n    if (address === weth_address) {\r\n      const balanceRaw = await provider.getBalance(accountAddress);\r\n\r\n      return {\r\n        balance: ethers.utils.formatEther(balanceRaw),\r\n        symbol: coins[0].abbr,\r\n      };\r\n    } else {\r\n      const token = new Contract(address, ERC20.abi, signer);\r\n      const tokenDecimals = await getDecimals(token);\r\n      const balanceRaw = await token.balanceOf(accountAddress);\r\n      const symbol = await token.symbol();\r\n\r\n      return {\r\n        balance: balanceRaw*10**(-tokenDecimals),\r\n        symbol: symbol,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.log ('The getBalanceAndSymbol function had an error!');\r\n    console.log (error)\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\r\n// No error handling is done, so any issues can be caught with the use of .catch()\r\n// To work correctly, there needs to be 7 arguments:\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `amount` - A float or similar number representing the value of address1's token to trade\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `signer` - The current signer\r\nexport async function swapTokens(\r\n  address1,\r\n  address2,\r\n  amount,\r\n  routerContract,\r\n  accountAddress,\r\n  signer\r\n) {\r\n  const tokens = [address1, address2];\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const tokenDecimals = await getDecimals(token1);\r\n  \r\n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\r\n  const amountOut = await routerContract.callStatic.getAmountsOut(\r\n    amountIn,\r\n    tokens\r\n  );\r\n\r\n  await token1.approve(routerContract.address, amountIn);\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth -> Token\r\n    await routerContract.swapExactETHForTokens(\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline,\r\n      { value: amountIn }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token -> Eth\r\n    await routerContract.swapExactTokensForETH(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  } else {\r\n    await routerContract.swapExactTokensForTokens(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n//This function returns the conversion rate between two token addresses\r\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\r\n//    `amountIn` - Amount of the token at address 1 to be swaped from\r\n//    `routerContract` - The router contract to carry out this swap\r\nexport async function getAmountOut(\r\n  address1,\r\n  address2,\r\n  amountIn,\r\n  routerContract,\r\n  signer\r\n) {\r\n  try {\r\n    const token1 = new Contract(address1, ERC20.abi, signer);\r\n    const token1Decimals = await getDecimals(token1);\r\n\r\n    const token2 = new Contract(address2, ERC20.abi, signer);\r\n    const token2Decimals = await getDecimals(token2);\r\n\r\n    const values_out = await routerContract.getAmountsOut(\r\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\r\n      [address1, address2]\r\n    );\r\n    const amount_out = values_out[1]*10**(-token2Decimals);\r\n    console.log('amount out: ', amount_out)\r\n    return Number(amount_out);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\r\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\r\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\r\n//    `pair` - The pair contract for the two tokens\r\nexport async function fetchReserves(address1, address2, pair, signer) {\r\n  try {\r\n\r\n    // Get decimals for each coin\r\n    const coin1 = new Contract(address1, ERC20.abi, signer);\r\n    const coin2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n    const coin1Decimals = await getDecimals(coin1);\r\n    const coin2Decimals = await getDecimals(coin2);\r\n\r\n    // Get reserves\r\n    const reservesRaw = await pair.getReserves();\r\n\r\n    // Put the results in the right order\r\n    const results =  [\r\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\r\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\r\n    ];\r\n\r\n    // Scale each to the right decimal place\r\n    return [\r\n      (results[0]*10**(-coin1Decimals)),\r\n      (results[1]*10**(-coin2Decimals))\r\n    ]\r\n  } catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0];\r\n  }\r\n}\r\n\r\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\nexport async function getReserves(\r\n  address1,\r\n  address2,\r\n  factory,\r\n  signer,\r\n  accountAddress\r\n) {\r\n  try {\r\n    const pairAddress = await factory.getPair(address1, address2);\r\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n  \r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n  \r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\r\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\r\n      const liquidityTokens = Number(\r\n        ethers.utils.formatEther(liquidityTokens_BN)\r\n      );\r\n    \r\n      return [\r\n        reservesRaw[0].toPrecision(6),\r\n        reservesRaw[1].toPrecision(6),\r\n        liquidityTokens,\r\n      ];\r\n    } else {\r\n      console.log(\"no reserves yet\");\r\n      return [0,0,0];\r\n    }\r\n  }catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0, 0];\r\n  }\r\n}\r\n","import * as chains from './chains';\r\n\r\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\r\n\r\nconst AUTONITYCoins = [\r\n  {\r\n    name: \"Auton\",\r\n    abbr: \"AUT\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Newton\",\r\n    abbr: \"NEW\",\r\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\r\n  },\r\n  {\r\n    name: \"Token A\",\r\n    abbr: \"TA\",\r\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\r\n  },\r\n  {\r\n    name: \"Token B\",\r\n    abbr: \"TB\",\r\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\r\n  },\r\n  {\r\n    name: \"Token C\",\r\n    abbr: \"TC\",\r\n    address: \"0x03c7D835CceE5d741b3f3D144eBfC5327925ECf9\",\r\n  },\r\n  {\r\n    name: \"Token D\",\r\n    abbr: \"TD\",\r\n    address: \"0x90636A8bb3AD4C2168EE20CF5E6183D827Da2E91\",\r\n  }\r\n]\r\n\r\nconst DEVNETCoins = [\r\n  {\r\n    name: \"Auton\",\r\n    abbr: \"AUT\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Newton\",\r\n    abbr: \"NEW\",\r\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\r\n  },\r\n  {\r\n    name: \"Token A\",\r\n    abbr: \"TA\",\r\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\r\n  },\r\n  {\r\n    name: \"Token B\",\r\n    abbr: \"TB\",\r\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\r\n  }\r\n]\r\n\r\nconst PARASTATECoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Token A\",\r\n    abbr: \"TA\",\r\n    address: \"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\",\r\n  },\r\n  {\r\n    name: \"Token B\",\r\n    abbr: \"TB\",\r\n    address: \"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\",\r\n  },\r\n  \r\n  {\r\n    name: \"Token C\",\r\n    abbr: \"TC\",\r\n    address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\r\n  },\r\n  {\r\n    name: \"Token D\",\r\n    abbr: \"TD\",\r\n    address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\r\n  }\r\n]\r\n\r\nconst GANACHECoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Token A\",\r\n    abbr: \"TA\",\r\n    address: \"0xE8C4BE1Bd495c984dD83B683966B7B538d3Ea82C\",\r\n  },\r\n  {\r\n    name: \"Token B\",\r\n    abbr: \"TB\",\r\n    address: \"0x30988e63329713c3f3FeA1ca1B94D4Abb02F78C5\",\r\n  },\r\n  \r\n  {\r\n    name: \"Token C\",\r\n    abbr: \"TC\",\r\n    address: \"0x23b4ce07ef4e2378319E40CbC0cc95EAbCf8E419\",\r\n  },\r\n  {\r\n    name: \"Token D\",\r\n    abbr: \"TD\",\r\n    address: \"0x49Ec3915F4daB907f7C6F74Cf5110366FCCc81A5\",\r\n  }\r\n]\r\n\r\nconst MAINNETCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\r\n  },\r\n]\r\n\r\nconst ROPSTENCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0xad6d458402f60fd3bd25163575031acdce07538d\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x6ee856ae55b6e1a249f04cd3b947141bc146273c\",\r\n  },\r\n]\r\n\r\nconst KOVANCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0xc4375b7de8af5a38a93548eb8453a498222c4ff2\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0xf3e0d7bf58c5d455d31ef1c2d5375904df525105\",\r\n  },\r\n]\r\n\r\nconst RINKEBYCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x95b58a6bff3d14b7db2f5cb5f0ad413dc2940658\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\",\r\n  },\r\n]\r\n\r\nconst GÃ–RLICoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\",\r\n  },\r\n]\r\n\r\nconst COINS = new Map();\r\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\r\nCOINS.set(chains.ChainId.ROPSTEN, ROPSTENCoins);\r\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\r\nCOINS.set(chains.ChainId.GÃ–RLI, GÃ–RLICoins);\r\nCOINS.set(chains.ChainId.KOVAN, KOVANCoins);\r\nCOINS.set(chains.ChainId.AUTONITY, AUTONITYCoins);\r\nCOINS.set(chains.ChainId.DEVNET, DEVNETCoins);\r\nCOINS.set(chains.ChainId.PARASTATE, PARASTATECoins);\r\nCOINS.set(chains.ChainId.GANCHE, GANACHECoins)\r\nexport default COINS","import { useEffect, useState, useRef } from \"react\";\r\nimport { createTheme } from \"@material-ui/core\";\r\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getRouter,\r\n  getNetwork,\r\n  getWeth,\r\n} from \"./ethereumFunctions\";\r\nimport COINS from \"./constants/coins\";\r\nimport * as chains from \"./constants/chains\";\r\n\r\ncreateTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ff0000\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    secondary: {\r\n      main: \"#9e9e9e\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\n\r\nconst Web3Provider = (props) => {\r\n  const [isConnected, setConnected] = useState(true);\r\n  let network = Object.create( {} )\r\n  network.provider = useRef(null);\r\n  network.signer = useRef(null);\r\n  network.account = useRef(null);\r\n  network.coins = [];\r\n  network.chainID = useRef(null);\r\n  network.router = useRef(null);\r\n  network.factory = useRef(null);\r\n  network.weth = useRef(null);\r\n  const backgroundListener = useRef(null);\r\n  async function setupConnection() {\r\n    try {\r\n      console.log('lets go!');\r\n     // network.provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      network.signer = await network.provider.getSigner();\r\n      await getAccount().then(async (result) => {\r\n        network.account = result;\r\n      });\r\n\r\n      await getNetwork(network.provider).then(async (chainId) => {\r\n        // Set chainID\r\n        network.chainID = chainId;\r\n        if (chains.networks.includes(chainId)) {\r\n          // Get the router using the chainID\r\n          network.router = await getRouter(\r\n            chains.routerAddress.get(chainId),\r\n            network.signer\r\n          );\r\n          // Get default coins for network\r\n          network.coins = COINS.get(chainId);\r\n          // Get Weth address from router\r\n          await network.router.WETH().then((wethAddress) => {\r\n            network.weth = getWeth(wethAddress, network.signer);\r\n            // Set the value of the weth address in the default coins array\r\n            network.coins[0].address = wethAddress;\r\n          });\r\n          // Get the factory address from the router\r\n          await network.router.factory().then((factory_address) => {\r\n            network.factory = getFactory(\r\n              factory_address,\r\n              network.signer\r\n            );\r\n          });\r\n          setConnected(true);\r\n        } else {\r\n          console.log(\"Wrong network mate.\");\r\n          setConnected(false);\r\n        }\r\n      });\r\n\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async function createListener() {\r\n    return setInterval(async () => {\r\n      console.log(\"Heartbeat\");\r\n      try {\r\n        // Check the account has not changed\r\n        const account = await getAccount();\r\n        if (account !== network.account) {\r\n          await setupConnection();\r\n        }\r\n\r\n      } catch (e) {\r\n        setConnected(false);\r\n        await setupConnection();\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  useEffect(async () => {\r\n    // Initial setup\r\n    console.log(\"Initial hook\");\r\n    await setupConnection();\r\n    console.log(\"network: \", network);\r\n\r\n    // Start background listener\r\n    if (backgroundListener.current != null) {\r\n      clearInterval(backgroundListener.current);\r\n    }\r\n    const listener = createListener();\r\n    backgroundListener.current = listener;\r\n    return () => clearInterval(backgroundListener.current);\r\n  }, []);\r\n\r\n  const renderNotConnected = () => {\r\n    console.log(\"Rendering\");\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <ConnectWalletPage />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isConnected && renderNotConnected()}\r\n      {isConnected && <div> {props.render(network)}</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Web3Provider;\r\n","export const MenuItems = [\r\n  {\r\n    title: \"Swap\",\r\n    url: \"/Alternative-Uniswap-Interface/\",\r\n    cName: \"nav-links\",\r\n  },\r\n  {\r\n    title: \"Liquidity\",\r\n    url: \"/Alternative-Uniswap-Interface/liquidity\",\r\n    cName: \"nav-links\",\r\n  },\r\n];\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MenuItems } from \"./MenuItems\";\r\nimport \"./NavBar.css\";\r\n\r\nclass NavBar extends Component {\r\n  state = { clicked: false };\r\n\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"Title\">\r\n          <h1 className=\"navbar-logo\">\r\n            Alternative Uniswap Interface\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"NavbarItems\">\r\n          <ul className={`nav-menu`}>\r\n            {MenuItems.map((item, index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <Link className={\"nav-links\"} to={item.url}>\r\n                    {item.title}\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"80px\",\r\n    backgroundColor: COLORS.grey[50],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.grey[300],\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\",\r\n  },\r\n  container_input: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"68px\",\r\n    backgroundColor: COLORS.grey[50],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.grey[300],\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\",\r\n    marginLeft: \"50%\",\r\n    textAlign: \"right\",\r\n  },\r\n  container_blank: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"80px\",\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  grid: {\r\n    height: \"60px\",\r\n  },\r\n  fab: {\r\n    zIndex: \"0\",\r\n  },\r\n  input: {\r\n    ...theme.typography.h5,\r\n    width: \"100%\",\r\n  },\r\n  inputBase: {\r\n    textAlign: \"right\",\r\n  },\r\n}));\r\n\r\nCoinField.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  symbol: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  activeField: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport function RemoveLiquidityField1(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField } = props;\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"0.0\"\r\n            disabled={!activeField}\r\n            classes={{\r\n              root: classes.container_input,\r\n              input: classes.inputBase,\r\n            }}\r\n          />\r\n        </Grid>\r\n        {/* </div> */}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function RemoveLiquidityField2(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol } = props;\r\n\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function CoinField(props) {\r\n  // This component is used to selecting a token and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField } = props;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"0.0\"\r\n            disabled={!activeField}\r\n            classes={{ root: classes.input, input: classes.inputBase }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    width: \"100%\",\r\n    paddingTop: theme.spacing(0.5),\r\n    paddingBottom: theme.spacing(0.5),\r\n    \"&:hover, &$focusVisible\": {\r\n      backgroundColor: COLORS.grey[200],\r\n    },\r\n  },\r\n  coinName: {\r\n    opacity: 0.6,\r\n  },\r\n}));\r\n\r\nCoinButton.propTypes = {\r\n  coinName: PropTypes.string.isRequired,\r\n  coinAbbr: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function CoinButton(props) {\r\n  const { coinName, coinAbbr, onClick } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\r\n      <Grid container direction=\"column\">\r\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\r\n        <Typography variant=\"body2\" className={classes.coinName}>\r\n          {coinName}\r\n        </Typography>\r\n      </Grid>\r\n    </ButtonBase>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CoinButton from \"./CoinButton\";\r\nimport { doesTokenExist } from \"../ethereumFunctions\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  titleSection: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  titleText: {\r\n    alignSelf: \"center\",\r\n  },\r\n  hr: {\r\n    margin: 0,\r\n  },\r\n  address: {\r\n    paddingLeft: theme.spacing(2.5),\r\n    paddingRight: theme.spacing(2.5),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  coinList: {\r\n    height: \"300px\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  coinContainer: {\r\n    paddingLeft: theme.spacing(0.5),\r\n    paddingRight: theme.spacing(0.5),\r\n    paddingTop: theme.spacing(2),\r\n    marginTop: theme.spacing(2),\r\n    overflow: \"hidden\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle\r\n      disableTypography\r\n      className={classes.titleSection}\r\n      {...other}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignContent=\"center\"\r\n      >\r\n        <Typography variant=\"h6\" className={classes.titleText}>\r\n          {children}\r\n        </Typography>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </Grid>\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n    backgroundColor: COLORS.grey[100],\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nCoinDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  coins: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function CoinDialog(props) {\r\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\r\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\r\n  // addresses will first be validated to make sure they exist.\r\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\r\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\r\n\r\n  const classes = useStyles();\r\n  const { onClose, open, coins, signer } = props;\r\n\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n\r\n  // Called when the user tries to input a custom address, this function will validate the address and will either\r\n  // then close the dialog and return the validated address, or will display an error.\r\n  const submit = () => {\r\n    if (doesTokenExist(address, signer)) {\r\n      exit(address);\r\n    } else {\r\n      setError(\"This address is not valid\");\r\n    }\r\n  };\r\n\r\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\r\n  const exit = (value) => {\r\n    setError(\"\");\r\n    setAddress(\"\");\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => exit(undefined)}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <div className={classes.coinContainer}>\r\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\r\n          <TextField\r\n            value={address}\r\n            onChange={(e) => setAddress(e.target.value)}\r\n            variant=\"outlined\"\r\n            placeholder=\"Paste Address\"\r\n            error={error !== \"\"}\r\n            helperText={error}\r\n            fullWidth\r\n            className={classes.address}\r\n          />\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          <Grid item className={classes.coinList}>\r\n            <Grid container direction=\"column\">\r\n              {/* Maps all of the tokens in the constants file to buttons */}\r\n              {coins.map((coin, index) => (\r\n                <Grid item key={index} xs={12}>\r\n                  <CoinButton\r\n                    coinName={coin.name}\r\n                    coinAbbr={coin.abbr}\r\n                    onClick={() => exit(coin.address)}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <DialogActions>\r\n        <Button autoFocus onClick={submit} color=\"primary\">\r\n          Enter\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\r\nimport green from \"@material-ui/core/colors/green\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  wrapper: {\r\n    margin: 0,\r\n    position: \"relative\",\r\n  },\r\n  progress: {\r\n    color: green[500],\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n}));\r\n\r\nexport default function LoadingButton(props) {\r\n  const classes = useStyles();\r\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        fullWidth\r\n        disabled={loading || !valid}\r\n        type=\"submit\"\r\n        onClick={onClick}\r\n        {...other}\r\n      >\r\n        {children}\r\n      </Button>\r\n      {loading && <CircularProgress size={24} className={classes.progress} />}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Dialog,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function WrongNetwork(props) {\r\n\r\n  const classes = useStyles();\r\n  const {open} = props;\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    makeStyles,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport {useSnackbar} from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {\r\n    // getAccount,\r\n    // getFactory,\r\n    // getProvider,\r\n    // getRouter,\r\n    // getSigner,\r\n    // getNetwork,\r\n    getAmountOut,\r\n    getBalanceAndSymbol,\r\n    // getWeth,\r\n    swapTokens,\r\n    getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\n\r\nconst styles = (theme) => ({\r\n    paperContainer: {\r\n        borderRadius: theme.spacing(2),\r\n        padding: theme.spacing(1),\r\n        paddingBottom: theme.spacing(3),\r\n    },\r\n    switchButton: {\r\n        zIndex: 1,\r\n        margin: \"-16px\",\r\n        padding: theme.spacing(0.5),\r\n    },\r\n    fullWidth: {\r\n        width: \"100%\",\r\n    },\r\n    title: {\r\n        textAlign: \"center\",\r\n        padding: theme.spacing(0.5),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    hr: {\r\n        width: \"100%\",\r\n    },\r\n    balance: {\r\n        padding: theme.spacing(1),\r\n        overflow: \"wrap\",\r\n        textAlign: \"center\",\r\n    },\r\n    footer: {\r\n        marginTop: \"285px\",\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n    const classes = useStyles();\r\n    const {enqueueSnackbar} = useSnackbar();\r\n\r\n    // Stores a record of whether their respective dialog window is open\r\n    const [dialog1Open, setDialog1Open] = React.useState(false);\r\n    const [dialog2Open, setDialog2Open] = React.useState(false);\r\n    const [wrongNetworkOpen] = React.useState(false);\r\n\r\n    // Stores data about their respective coin\r\n    const [coin1, setCoin1] = React.useState({\r\n        address: undefined,\r\n        symbol: undefined,\r\n        balance: undefined,\r\n    });\r\n    const [coin2, setCoin2] = React.useState({\r\n        address: undefined,\r\n        symbol: undefined,\r\n        balance: undefined,\r\n    });\r\n\r\n    // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n    const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n    // Stores the current value of their respective text box\r\n    const [field1Value, setField1Value] = React.useState(\"\");\r\n    const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n    // Controls the loading button\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n    // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n    const switchFields = () => {\r\n        setCoin1(coin2);\r\n        setCoin2(coin1);\r\n        setField1Value(field2Value);\r\n        setReserves(reserves.reverse());\r\n    };\r\n\r\n    // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n    const handleChange = {\r\n        field1: (e) => {\r\n            setField1Value(e.target.value);\r\n        },\r\n    };\r\n\r\n    // Turns the account's balance into something nice and readable\r\n    const formatBalance = (balance, symbol) => {\r\n        if (balance && symbol)\r\n            return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n        else return \"0.0\";\r\n    };\r\n\r\n    // Turns the coin's reserves into something nice and readable\r\n    const formatReserve = (reserve, symbol) => {\r\n        if (reserve && symbol) return reserve + \" \" + symbol;\r\n        else return \"0.0\";\r\n    };\r\n\r\n    // Determines whether the button should be enabled or not\r\n    const isButtonEnabled = () => {\r\n\r\n        // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n        const parsedInput1 = parseFloat(field1Value);\r\n        const parsedInput2 = parseFloat(field2Value);\r\n        return (\r\n            coin1.address &&\r\n            coin2.address &&\r\n            !isNaN(parsedInput1) &&\r\n            !isNaN(parsedInput2) &&\r\n            0 < parsedInput1 &&\r\n            parsedInput1 <= coin1.balance\r\n        );\r\n    };\r\n\r\n    // Called when the dialog window for coin1 exits\r\n    const onToken1Selected = (address) => {\r\n        // Close the dialog window\r\n        setDialog1Open(false);\r\n\r\n        // If the user inputs the same token, we want to switch the data in the fields\r\n        if (address === coin2.address) {\r\n            switchFields();\r\n        }\r\n        // We only update the values if the user provides a token\r\n        else if (address) {\r\n            // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n            getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n                setCoin1({\r\n                    address: address,\r\n                    symbol: data.symbol,\r\n                    balance: data.balance,\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    // Called when the dialog window for coin2 exits\r\n    const onToken2Selected = (address) => {\r\n        // Close the dialog window\r\n        setDialog2Open(false);\r\n\r\n        // If the user inputs the same token, we want to switch the data in the fields\r\n        if (address === coin1.address) {\r\n            switchFields();\r\n        }\r\n        // We only update the values if the user provides a token\r\n        else if (address) {\r\n            // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n            getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n                setCoin2({\r\n                    address: address,\r\n                    symbol: data.symbol,\r\n                    balance: data.balance,\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\r\n    const swap = () => {\r\n        console.log(\"Attempting to swap tokens...\");\r\n        setLoading(true);\r\n\r\n        swapTokens(\r\n            coin1.address,\r\n            coin2.address,\r\n            field1Value,\r\n            props.network.router,\r\n            props.network.account,\r\n            props.network.signer\r\n        )\r\n            .then(() => {\r\n                setLoading(false);\r\n\r\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n                setField1Value(\"\");\r\n                enqueueSnackbar(\"Transaction Successful\", {variant: \"success\"});\r\n            })\r\n            .catch((e) => {\r\n                setLoading(false);\r\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n                    variant: \"error\",\r\n                    autoHideDuration: 10000,\r\n                });\r\n            });\r\n    };\r\n\r\n    // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n    // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n    // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n    // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n    // of the two coins change.\r\n\r\n    // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n    // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n    // the new reserves will be calculated.\r\n    useEffect(() => {\r\n        console.log(\r\n            \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n        );\r\n\r\n        if (coin1.address && coin2.address) {\r\n            getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\r\n                (data) => setReserves(data)\r\n            );\r\n        }\r\n    }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\r\n\r\n    // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n    // It attempts to calculate and set the state variable `field2Value`\r\n    // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n    // the value in the output box will change.\r\n    useEffect(() => {\r\n        if (isNaN(parseFloat(field1Value))) {\r\n            setField2Value(\"\");\r\n        } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\r\n            getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\r\n                (amount) => setField2Value(amount.toFixed(7))\r\n            ).catch(e => {\r\n                console.log(e);\r\n                setField2Value(\"NA\");\r\n            })\r\n        } else {\r\n            setField2Value(\"\");\r\n        }\r\n    }, [field1Value, coin1.address, coin2.address]);\r\n\r\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n    useEffect(() => {\r\n        const coinTimeout = setTimeout(() => {\r\n            console.log('props: ', props);\r\n            console.log(\"Checking balances...\");\r\n\r\n            if (coin1.address && coin2.address && props.network.account) {\r\n                getReserves(\r\n                    coin1.address,\r\n                    coin2.address,\r\n                    props.network.factory,\r\n                    props.network.signer,\r\n                    props.network.account\r\n                ).then((data) => setReserves(data));\r\n            }\r\n\r\n            if (coin1.address && props.network.account && !wrongNetworkOpen) {\r\n                getBalanceAndSymbol(\r\n                    props.network.account,\r\n                    coin1.address,\r\n                    props.network.provider,\r\n                    props.network.signer,\r\n                    props.network.weth.address,\r\n                    props.network.coins\r\n                ).then(\r\n                    (data) => {\r\n                        setCoin1({\r\n                            ...coin1,\r\n                            balance: data.balance,\r\n                        });\r\n                    }\r\n                );\r\n            }\r\n            if (coin2.address && props.network.account && !wrongNetworkOpen) {\r\n                getBalanceAndSymbol(\r\n                    props.network.account,\r\n                    coin2.address,\r\n                    props.network.provider,\r\n                    props.network.signer,\r\n                    props.network.weth.address,\r\n                    props.network.coins\r\n                ).then(\r\n                    (data) => {\r\n                        setCoin2({\r\n                            ...coin2,\r\n                            balance: data.balance,\r\n                        });\r\n                    }\r\n                );\r\n            }\r\n        }, 10000);\r\n\r\n        return () => clearTimeout(coinTimeout);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {/* Dialog Windows */}\r\n            <CoinDialog\r\n                open={dialog1Open}\r\n                onClose={onToken1Selected}\r\n                coins={props.network.coins}\r\n                props={props.network.signer}\r\n            />\r\n            <CoinDialog\r\n                open={dialog2Open}\r\n                onClose={onToken2Selected}\r\n                coins={props.network.coins}\r\n                signer={props.network.signer}\r\n            />\r\n            <WrongNetwork\r\n                open={wrongNetworkOpen}\r\n            />\r\n\r\n            {/* Coin Swapper */}\r\n            <Container maxWidth=\"xs\">\r\n                <Paper className={classes.paperContainer}>\r\n                    <Typography variant=\"h5\" className={classes.title}>\r\n                        Swap Coins\r\n                    </Typography>\r\n\r\n                    <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n                        <Grid item xs={12} className={classes.fullWidth}>\r\n                            <CoinField\r\n                                activeField={true}\r\n                                value={field1Value}\r\n                                onClick={() => setDialog1Open(true)}\r\n                                onChange={handleChange.field1}\r\n                                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <IconButton onClick={switchFields} className={classes.switchButton}>\r\n                            <SwapVerticalCircleIcon fontSize=\"medium\"/>\r\n                        </IconButton>\r\n\r\n                        <Grid item xs={12} className={classes.fullWidth}>\r\n                            <CoinField\r\n                                activeField={false}\r\n                                value={field2Value}\r\n                                onClick={() => setDialog2Open(true)}\r\n                                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <hr className={classes.hr}/>\r\n\r\n                        {/* Balance Display */}\r\n                        <Typography variant=\"h6\">Your Balances</Typography>\r\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n                            <Grid item xs={6}>\r\n                                <Typography variant=\"body1\" className={classes.balance}>\r\n                                    {formatBalance(coin1.balance, coin1.symbol)}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography variant=\"body1\" className={classes.balance}>\r\n                                    {formatBalance(coin2.balance, coin2.symbol)}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <hr className={classes.hr}/>\r\n\r\n                        {/* Reserves Display */}\r\n                        <Typography variant=\"h6\">Reserves</Typography>\r\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n                            <Grid item xs={6}>\r\n                                <Typography variant=\"body1\" className={classes.balance}>\r\n                                    {formatReserve(reserves[0], coin1.symbol)}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography variant=\"body1\" className={classes.balance}>\r\n                                    {formatReserve(reserves[1], coin2.symbol)}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <hr className={classes.hr}/>\r\n\r\n                        <LoadingButton\r\n                            loading={loading}\r\n                            valid={isButtonEnabled()}\r\n                            success={false}\r\n                            fail={false}\r\n                            onClick={swap}\r\n                        >\r\n                            <LoopIcon/>\r\n                            Swap\r\n                        </LoadingButton>\r\n                    </Grid>\r\n                </Paper>\r\n            </Container>\r\n\r\n            <Grid\r\n                container\r\n                className={classes.footer}\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"flex-end\"\r\n            >\r\n                <p>\r\n                    Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\r\n                    <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n                </p>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CoinSwapper;","import React from \"react\";\r\nimport { ButtonGroup, Button } from \"@material-ui/core\";\r\n\r\nexport default function SwitchButton(props) {\r\n  const { setDeploy } = props;\r\n\r\n  const changeStyles = (K) => {\r\n    if (K === true) {\r\n      let add_button = document.getElementById(\"add-button\");\r\n      add_button.style.backgroundColor = \"#ff0000\";\r\n\r\n      let remove_button = document.getElementById(\"remove-button\");\r\n      remove_button.style.backgroundColor = \"#9e9e9e\";\r\n    } else {\r\n      let remove_button = document.getElementById(\"remove-button\");\r\n      remove_button.style.backgroundColor = \"#ff0000\";\r\n\r\n      let add_button = document.getElementById(\"add-button\");\r\n      add_button.style.backgroundColor = \"#9e9e9e\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ButtonGroup size=\"large\" variant=\"contained\">\r\n        <Button\r\n          id=\"add-button\"\r\n          color=\"primary\"\r\n          text=\"white\"\r\n          onClick={() => {\r\n            setDeploy(true);\r\n            changeStyles(true);\r\n          }}\r\n        >\r\n          Deploy Liquidity\r\n        </Button>\r\n\r\n        <Button\r\n          id=\"remove-button\"\r\n          color=\"secondary\"\r\n          text=\"white\"\r\n          onClick={() => {\r\n            setDeploy(false);\r\n            changeStyles(false);\r\n          }}\r\n        >\r\n          Remove Liquidity\r\n        </Button>\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n","import { Contract, ethers } from \"ethers\";\r\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\r\n\r\nconst ERC20 = require(\"../build/ERC20.json\");\r\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\r\n\r\n// Function used to add Liquidity to any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\r\n//    `amount1` - A float or similar number representing the value of address1's coin to add\r\n//    `amount2` - A float or similar number representing the value of address2's coin to add\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function addLiquidity(\r\n  address1,\r\n  address2,\r\n  amount1,\r\n  amount2,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\r\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  await token1.approve(routerContract.address, amountIn1);\r\n  await token2.approve(routerContract.address, amountIn2);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    amountIn1,\r\n    amountIn2,\r\n    amount1Min,\r\n    amount2Min,\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.addLiquidityETH(\r\n      address2,\r\n      amountIn2,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn1 }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.addLiquidityETH(\r\n      address1,\r\n      amountIn1,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn2 }\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.addLiquidity(\r\n      address1,\r\n      address2,\r\n      amountIn1,\r\n      amountIn2,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n// Function used to remove Liquidity from any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function removeLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity_tokens,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer,\r\n  factory\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const Getliquidity = (liquidity_tokens)=>{\r\n    if (liquidity_tokens < 0.001){\r\n      return ethers.BigNumber.from(liquidity_tokens*10**18);\r\n    }\r\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\r\n  }\r\n\r\n  const liquidity = Getliquidity(liquidity_tokens);\r\n  console.log('liquidity: ', liquidity);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  await pair.approve(routerContract.address, liquidity);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(liquidity),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.removeLiquidityETH(\r\n      address2,\r\n      liquidity,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.removeLiquidityETH(\r\n      address1,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.removeLiquidity(\r\n      address1,\r\n      address2,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\nconst quote = (amount1, reserve1, reserve2) => {\r\n  const amount2 = amount1 * (reserve2 / reserve1);\r\n  return [amount2];\r\n};\r\n\r\n// Function used to get a quote of the liquidity addition\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\r\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nasync function quoteMintLiquidity(\r\n  address1,\r\n  address2,\r\n  amountA,\r\n  amountB,\r\n  factory,\r\n  signer\r\n){\r\n  const MINIMUM_LIQUIDITY = 1000;\r\n  let _reserveA = 0;\r\n  let _reserveB = 0;\r\n  let totalSupply = 0;\r\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n      const reserveA = reservesRaw[0];\r\n      const reserveB = reservesRaw[1];\r\n    \r\n      const _totalSupply = await pair.totalSupply();\r\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n      return [reserveA, reserveB, totalSupply]\r\n    } else {\r\n      return [0,0,0]\r\n    }\r\n  });\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  // Need to do all this decimals work to account for 0 decimal numbers\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const valueA = amountA*(10**token1Decimals);\r\n  const valueB = amountB*(10**token2Decimals);\r\n\r\n  const reserveA = _reserveA*(10**token1Decimals);\r\n  const reserveB = _reserveB*(10**token2Decimals);\r\n\r\n  if (totalSupply == 0){\r\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\r\n  };\r\n  \r\n  return (\r\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\r\n  );\r\n};\r\n\r\nexport async function quoteAddLiquidity(\r\n  address1,\r\n  address2,\r\n  amountADesired,\r\n  amountBDesired,\r\n  factory,\r\n  signer\r\n) {\r\n\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  if (reserveA === 0 && reserveB === 0) {\r\n    const amountOut = await quoteMintLiquidity(\r\n      address1,\r\n      address2,\r\n      amountADesired,\r\n      amountBDesired,\r\n      factory,\r\n      signer);\r\n    return [\r\n      amountADesired,\r\n      amountBDesired,\r\n      amountOut.toPrecision(8),\r\n    ];\r\n  } else {\r\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\r\n    if (amountBOptimal <= amountBDesired) {\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountADesired,\r\n        amountBOptimal,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountADesired,\r\n        amountBOptimal,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    } else {\r\n      const amountAOptimal = quote(\r\n        amountBDesired,\r\n        reserveB,\r\n        reserveA\r\n      );\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\n// Function used to get a quote of the liquidity removal\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteRemoveLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  console.log(\"pair address\", pairAddress);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  const feeOn =\r\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\r\n\r\n  const _kLast = await pair.kLast();\r\n  const kLast = Number(ethers.utils.formatEther(_kLast));\r\n\r\n  const _totalSupply = await pair.totalSupply();\r\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n\r\n  if (feeOn && kLast > 0) {\r\n    const feeLiquidity =\r\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\r\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\r\n    totalSupply = totalSupply + feeLiquidity;\r\n  }\r\n\r\n  const Aout = (reserveA * liquidity) / totalSupply;\r\n  const Bout = (reserveB * liquidity) / totalSupply;\r\n\r\n  return [liquidity, Aout, Bout];\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getBalanceAndSymbol,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\n\r\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\r\n\r\nimport CoinField from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityDeployer(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the user's balance of liquidity tokens for the current pair\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Used when getting a quote of liquidity\r\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    let oldField1Value = field1Value;\r\n    let oldField2Value = field2Value;\r\n\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(oldField2Value);\r\n    setField2Value(oldField1Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n    field2: (e) => {\r\n      setField2Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      parsedInput1 !== NaN &&\r\n      0 < parsedInput1 &&\r\n      parsedInput2 !== NaN &&\r\n      0 < parsedInput2 &&\r\n      parsedInput1 <= coin1.balance &&\r\n      parsedInput2 <= coin2.balance\r\n    );\r\n  };\r\n\r\n\r\n\r\n  const deploy = () => {\r\n    console.log(\"Attempting to deploy liquidity...\");\r\n    setLoading(true);\r\n\r\n    addLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      field2Value,\r\n      '0',\r\n      '0',\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        setField2Value(\"\");\r\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(\r\n        props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && props.network.account) {\r\n      getReserves(\r\n        coin1.address,\r\n        coin2.address,\r\n        props.network.factory,\r\n        props.network.signer,\r\n        props.network.account\r\n        ).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity deployment.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity deployment\");\r\n\r\n      quoteAddLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        field1Value,\r\n        field2Value,\r\n        props.network.factory,\r\n        props.network.signer\r\n      ).then((data) => {\r\n        // console.log(data);\r\n        console.log(\"TokenA in: \", data[0]);\r\n        console.log(\"TokenB in: \", data[1]);\r\n        console.log(\"Liquidity out: \", data[2]);\r\n        setLiquidityOut([data[0], data[1], data[2]]);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Liquidity deployer */}\r\n      <Typography variant=\"h5\" className={classes.title}></Typography>\r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.networksigner}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n      />\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <CoinField\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <CoinField\r\n            activeField={true}\r\n            value={field2Value}\r\n            onClick={() => setDialog2Open(true)}\r\n            onChange={handleChange.field2}\r\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={4}\r\n        className={classes.balance}\r\n      >\r\n        <hr className={classes.hr} />\r\n        <Grid\r\n          container\r\n          item\r\n          className={classes.values}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          {/* Balance Display */}\r\n          <Typography variant=\"h6\">Your Balances</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin1.balance, coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin2.balance, coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Reserves Display */}\r\n          <Typography variant=\"h6\">Reserves</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[0], coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[1], coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Liquidity Tokens Display */}\r\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"center\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Paper className={classes.paperContainer}>\r\n          {/*Red  Display to show the quote */}\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n            className={classes.fullWidth}\r\n          >\r\n            {/* Tokens in */}\r\n            <Typography variant=\"h6\">Tokens in</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Liquidity Tokens Display */}\r\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        <hr className={classes.hr} />\r\n      </Grid>\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={isButtonEnabled()}\r\n          success={false}\r\n          fail={false}\r\n          onClick={deploy}\r\n        >\r\n          <AccountBalanceIcon className={classes.buttonIcon} />\r\n          Deploy\r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityDeployer;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getBalanceAndSymbol,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\r\nimport {\r\n  RemoveLiquidityField1,\r\n  RemoveLiquidityField2,\r\n} from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityRemover(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen] = React.useState(false);\r\n\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the liquidity tokens balance of the user\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Stores the input and output for the liquidity removal preview\r\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    const parsedInput = parseFloat(field1Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      parsedInput !== NaN &&\r\n      0 < parsedInput &&\r\n      parsedInput <= liquidityTokens\r\n    );\r\n  };\r\n\r\n  const remove = () => {\r\n    console.log(\"Attempting to remove liquidity...\");\r\n    setLoading(true);\r\n\r\n    removeLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      0,\r\n      0,\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer,\r\n      props.network.factory\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(\r\n        props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && props.network.account) {\r\n      getReserves(\r\n        coin1.address,\r\n        coin2.address,\r\n        props.network.factory,\r\n        props.network.signer,\r\n        props.network.account).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity removal.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity removal\");\r\n      quoteRemoveLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        field1Value,\r\n        props.network.factory,\r\n        props.network.signer\r\n      ).then((data) => {\r\n        setTokensOut(data);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, props.network.factory, props.network.signer]);\r\n\r\n  useEffect(() => {\r\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address, props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Coin Swapper */}\r\n      <Typography variant=\"h5\" className={classes.title}></Typography>\r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n      />\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField1\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField2\r\n            activeField={true}\r\n            onClick={() => setDialog2Open(true)}\r\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={4}\r\n        className={classes.balance}\r\n      >\r\n        <hr className={classes.hr} />\r\n        <Grid\r\n          container\r\n          item\r\n          className={classes.values}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          {/* Balance Display */}\r\n          <Typography variant=\"h6\">Your Balances</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin1.balance, coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin2.balance, coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Reserves Display */}\r\n          <Typography variant=\"h6\">Reserves</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[0], coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[1], coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Liquidity Tokens Display */}\r\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"center\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Paper className={classes.paperContainer}>\r\n          {/*Red  Display to show the quote */}\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n            className={classes.fullWidth}\r\n          >\r\n            {/* Tokens in */}\r\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Liquidity Tokens Display */}\r\n            <Typography variant=\"h6\">Tokens Out</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[1], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[2], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n        <hr className={classes.hr} />\r\n      </Grid>\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={isButtonEnabled()}\r\n          success={false}\r\n          fail={false}\r\n          onClick={remove}\r\n        >\r\n          <ArrowDownwardIcon className={classes.buttonIcon} />\r\n          Remove\r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityRemover;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport SwitchButton from \"./SwitchButton\";\r\nimport LiquidityDeployer from \"./LiquidityDeployer\";\r\nimport LiquidityRemover from \"./RemoveLiquidity\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 700,\r\n    margin: \"auto\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction Liquidity(props) {\r\n  const classes = useStyles();\r\n\r\n  const [deploy, setDeploy] = React.useState(true);\r\n\r\n  const deploy_or_remove = (deploy) => {\r\n    if (deploy === true) {\r\n      return <LiquidityDeployer network={props.network}/>;\r\n    }\r\n    return <LiquidityRemover network={props.network}/>;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            <SwitchButton setDeploy={setDeploy} />\r\n          </Typography>\r\n\r\n          {deploy_or_remove(deploy)}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Liquidity;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Web3Provider from \"./network\";\r\nimport NarBar from \"./NavBar/NavBar\";\r\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport Liquidity from \"./Liquidity/Liquidity\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ff0000\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    secondary: {\r\n      main: \"#9e9e9e\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <SnackbarProvider maxSnack={3}>\r\n        <ThemeProvider theme={theme}>\r\n          <Web3Provider\r\n            render={(network) => (\r\n              <div>\r\n                <NarBar />\r\n                <Route exact path=\"/Alternative-Uniswap-Interface/\">\r\n                  <CoinSwapper network={network} />\r\n                </Route>\r\n\r\n                <Route exact path=\"/Alternative-Uniswap-Interface/liquidity\">\r\n                  <Liquidity network={network} />\r\n                </Route>\r\n              </div>\r\n            )}\r\n          ></Web3Provider>\r\n        </ThemeProvider>\r\n      </SnackbarProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}